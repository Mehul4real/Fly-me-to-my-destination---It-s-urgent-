import java.util.*;
import java.lang.*;
import java.io.*;

class Fly
{
  /*We'll start from destination traversing back to source point storing minimuns in an array*/
	static int minPlanes(int ar[], int n){
		int[] planes = new int[n];
		int min;

		// Minimum number of jumps required to reach destination from destination is 0
		planes[n - 1] = 0;

		/* Starting from the second element, moving from right to left we construct the planes[]
		array where planes[i] represents minimum number of planes needed to reach ar[m-1] from ar[i]*/
		
    for (int i = n - 2; i >= 0; i--) {
			
      // If ar[i] is 0 then we can't move further
			if (ar[i] == 0)
				planes[i] = Integer.MAX_VALUE;

			// If we can direcly reach to destination from here then planes[i] is 1
			else if (ar[i] >= n - i - 1)
				planes[i] = 1;
				
			/*else we'll find out the minimum number of jumps needed to reach ar[n-1],
			check all the points reachable from here and planes[] value for those points*/
			else {
				min = Integer.MAX_VALUE;
				
				//we'll check with all reachable points that takes minimum number of planes.
				for (int j = i + 1; j < n && j <= ar[i] + i; j++) {
					if (min > planes[j])
						min = planes[j];
				}
				if (min != Integer.MAX_VALUE)
					planes[i] = min+1;
				else
					planes[i] = min; 
			}
		}
		//System.out.println(Arrays.toString(planes));
		return (planes[0]==Integer.MAX_VALUE)?-1:planes[0]+1;
	}
	
	public static void main (String[] args) throws java.lang.Exception
	{
		int[] ar = { 1,6,3,4,5,0,0,0,6 };
		int size = ar.length;
		System.out.println("Minimum planes requires are " + minPlanes(ar, size));
	}
}
